generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TbEstadosUsuarios {
  estado_usuario_id Int        @id(map: "pk_estado_usuario_id_pk") @default(autoincrement())
  nombre            String     @db.VarChar(100)
  Usuarios          Usuarios[]

  @@index([estado_usuario_id], name: "idx_estado_usuario_id")
}

model TbMetodosAutenticacion {
  metodo_autenticacion_id Int        @id(map: "pk_metodo_autenticacion_id_pk") @default(autoincrement())
  nombre                  String     @unique() @db.VarChar(100)
  Usuarios                Usuarios[]

  @@index([metodo_autenticacion_id], name: "idx_metodo_autenticacion_id")
}

model TbTipoUsuarios {
  tipo_usuario_id Int               @id(map: "pk_tipo_usuario_id") @default(autoincrement())
  nombre          String            @db.VarChar(100)
  estado          EstadoTipoUsuario @default(ACTIVO)
  Usuarios        Usuarios[]

  @@index([tipo_usuario_id], name: "idx_tipo_usuario_id")
}

model Perfiles {
  perfil_id                  Int                       @id(map: "pk_perfil_id") @default(autoincrement())
  codigo                     String                    @unique() @db.VarChar(5)
  nombre                     String                    @unique() @db.VarChar(100)
  descripcion                String?                   @default("") @db.Text()
  personalizado              Boolean                   @default(false)
  estado                     EstadoPerfil              @default(ACTIVO)
  UsuariosPerfiles           UsuariosPerfiles[]
  FormulariosPerfilesSec     FormulariosPerfiles[]
  FuncionalidadesPerfilesSec FuncionalidadesPerfiles[]

  @@index([perfil_id], name: "idx_perfil_id")
}

model UsuariosPerfiles {
  usuario_perfil_id Int      @id(map: "pk_usuario_perfil_id") @default(autoincrement())
  usuario_id        Int
  perfil_id         Int
  Usuarios          Usuarios @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usu_per_usuario_id")
  Perfiles          Perfiles @relation(fields: [perfil_id], references: [perfil_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usu_per_perfil_id")

  @@index([usuario_perfil_id], name: "idx_usuario_perfil_id")
}

model FormulariosPerfiles {
  formulario_perfil_id  Int                 @id(map: "pk_formulario_perfil_id") @default(autoincrement())
  formulario_empresa_id Int
  perfil_id             Int
  Perfiles              Perfiles            @relation(fields: [perfil_id], references: [perfil_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_for_per_perfil_id")
  FormulariosEmpresas   FormulariosEmpresas @relation(fields: [formulario_empresa_id], references: [formulario_empresa_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_for_per_formulario_empresa_id")

  @@index([formulario_perfil_id], name: "idx_formulario_perfil_id")
}

model FormulariosEmpresas {
  formulario_empresa_id Int                   @id(map: "pk_formulario_empresa_id") @default(autoincrement())
  formulario_gestion_id Int
  estado                Boolean               @default(true)
  FormulariosPerfiles   FormulariosPerfiles[]

  @@index([formulario_empresa_id], name: "idx_formulario_empresa_id")
}

model Usuarios {
  usuario_id                      Int                            @id(map: "pk_usuario_id") @default(autoincrement())
  nombre_usuario                  String                         @unique() @db.VarChar(100)
  contrasena                      String                         @db.VarChar(100)
  correo                          String                         @db.VarChar(100)
  idioma_id                       Int?
  salt                            String                         @db.VarChar(255)
  imagen                          String?                        @default("") @db.Text()
  metodo_autenticacion_id         Int?
  tipo_usuario_id                 Int
  estado_usuario_id               Int
  sol_cambio_contrasena           Boolean?                       @default(false)
  fecha_vigencia_contrasena       DateTime?                      @db.Timestamp(6)
  fecha_creacion                  DateTime?                      @db.Timestamp(6)
  fecha_actualizacion             DateTime?                      @db.Timestamp(6)
  cant_intentos                   Int                            @default(0)
  TbEstadosUsuarios               TbEstadosUsuarios              @relation(fields: [estado_usuario_id], references: [estado_usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_estado_usuario_id")
  TbMetodosAutenticacion          TbMetodosAutenticacion?        @relation(fields: [metodo_autenticacion_id], references: [metodo_autenticacion_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuarios_met_aut_id")
  TbTipoUsuarios                  TbTipoUsuarios                 @relation(fields: [tipo_usuario_id], references: [tipo_usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuarios_tipo_usuario_id")
  UsuariosHistoricoContrasenasSec UsuariosHistoricoContrasenas[]
  UsuariosParametrosValores       UsuariosParametrosValores[]
  UsuariosSesionesSec             UsuariosSesiones?
  UsuariosPerfiles                UsuariosPerfiles[]

  @@index([usuario_id], name: "idx_usuario_id")
}

model UsuariosHistoricoContrasenas {
  usu_historico_contrasena_id Int       @id(map: "pk_usu_historico_contrasena_id") @default(autoincrement())
  usuario_id                  Int
  contrasena                  String?   @db.VarChar(100)
  fecha_actualizacion         DateTime? @db.Timestamp(6)
  Usuarios                    Usuarios  @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "Usuario_fk")

  @@index([usu_historico_contrasena_id], name: "idx_usu_historico_contrasena_id")
}

model UsuariosParametros {
  usuario_parametro_id         Int                         @id(map: "pk_usuario_parametro_id") @default(autoincrement())
  nombre                       String                      @db.VarChar(100)
  alias                        String                      @db.VarChar(100)
  descripcion                  String                      @default("") @db.Text()
  valor_defecto                String?                     @db.VarChar(50)
  requerido                    Boolean?                    @default(false)
  UsuariosParametrosValoresSec UsuariosParametrosValores[]

  @@index([usuario_parametro_id], name: "idx_usuario_parametro_id")
}

model UsuariosParametrosValores {
  usuario_parametro_valor_id Int                @id(map: "pk_usuario_parametro_valor_id") @default(autoincrement())
  usuario_id                 Int
  usuario_parametro_id       Int
  valor                      String?            @db.VarChar(255)
  UsuariosParametros         UsuariosParametros @relation(fields: [usuario_parametro_id], references: [usuario_parametro_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usu_par_val_usuario_parametro_id")
  Usuarios                   Usuarios           @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "Usuario_fk")

  @@index([usuario_parametro_valor_id], name: "idx_usuario_parametro_valor_id")
}

model UsuariosSesiones {
  usuario_sesion_id  Int       @id(map: "pk_usuario_sesion_id") @default(autoincrement())
  usuario_id         Int       @unique
  token              String?   @db.VarChar(255)
  fecha_ultimo_login DateTime? @db.Timestamp(6)
  Usuarios           Usuarios  @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "Usuario_fk")

  @@index([usuario_sesion_id], name: "idx_usuario_sesion_id")
}

model FuncionalidadesPerfiles {
  funcionalidad_perfil_id Int      @id(map: "pk_funcionalidad_perfil_id") @default(autoincrement())
  perfil_id               Int
  funcionalidad_id        Int
  Perfiles                Perfiles @relation(fields: [perfil_id], references: [perfil_id], onDelete: NoAction, onUpdate: NoAction, map: "fun_per_perfil_id_fk")

  @@index([funcionalidad_perfil_id], name: "idx_funcionalidad_perfil_id")
}

enum EstadoPerfil {
  ACTIVO
  INACTIVO
}

enum EstadoTipoUsuario {
  ACTIVO
  INACTIVO
}
