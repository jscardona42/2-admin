generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Audits {
  audit_id      Int       @id @default(autoincrement()) @db.SmallInt
  login_id      Int?      @db.SmallInt
  status        String?   @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  type          String?   @db.VarChar(50)
  username      String?   @db.VarChar(100)
  role          String?   @db.VarChar(50)
  has_twofactor Int?      @db.SmallInt
}

model Login {
  id                Int         @id @default(autoincrement()) @db.SmallInt
  username          String
  password          String?
  token             String?
  salt              String?
  role_id           Int         @db.SmallInt
  active_two_factor Int?        @default(0) @db.SmallInt
  user_id           Int?        @db.SmallInt
  Roles             Roles       @relation(fields: [role_id], references: [id])
  Users             Users?      @relation(fields: [user_id], references: [id])
  Twofactor         Twofactor[]
}

model Menus {
  id           Int     @id @default(autoincrement())
  title        String
  path         String
  isEntity     Boolean
  parentMenuId Int?
  parentMenu   Menus?  @relation("menusToMenus", fields: [parentMenuId], references: [id])
  subMenu      Menus[] @relation("menusToMenus")
}

model Microservices {
  id       Int    @id @default(autoincrement()) @db.SmallInt
  name     String @db.VarChar(255)
  hostname String @db.VarChar(255)
  port     Int
  url      String @db.VarChar(32)
  state    Int?
}

model Permissions {
  id                      Int                    @id @default(autoincrement()) @db.SmallInt
  permission_principal_id Int?                   @db.SmallInt
  permissions             String?
  is_public               Boolean?
  Permissions_principal   Permissions_principal? @relation(fields: [permission_principal_id], references: [permission_principal_id])
  Roles_permissions       Roles_permissions[]
}

model Roles {
  id         Int          @id @default(autoincrement()) @db.SmallInt
  role       String       @db.VarChar(100)
  Login      Login[]
  Roles_menu Roles_menu[]
}

model Roles_menu {
  roles_menu_id    Int      @id @default(autoincrement()) @db.SmallInt
  role_id          Int?     @db.SmallInt
  permissions_menu String[]
  Roles            Roles?   @relation(fields: [role_id], references: [id])
}

model Roles_permissions {
  id            Int          @id @default(autoincrement()) @db.SmallInt
  role_id       Int          @db.SmallInt
  permission_id Int?         @db.SmallInt
  Permissions   Permissions? @relation(fields: [permission_id], references: [id])
}

model Twofactor {
  twofactor_id         Int                 @id @default(autoincrement()) @db.SmallInt
  twofactor_secret     String?             @db.VarChar(255)
  config_twofactor     Int?                @default(0) @db.SmallInt
  login_id             Int                 @db.SmallInt
  recovery_code        String?             @db.VarChar(255)
  validation_method_id Int?                @db.SmallInt
  time_creation_code   DateTime?           @db.Timestamp(6)
  Login                Login               @relation(fields: [login_id], references: [id])
  Validation_methods   Validation_methods? @relation(fields: [validation_method_id], references: [validation_method_id])
}

model Users {
  id    Int     @id @default(autoincrement()) @db.SmallInt
  name  String  @db.VarChar(100)
  email String  @db.VarChar(100)
  state Int?    @default(1) @db.SmallInt
  Login Login[]
}

model Validation_methods {
  validation_method_id Int         @id @default(autoincrement()) @db.SmallInt
  validation_method    String      @db.VarChar(255)
  state                Int?        @default(1) @db.SmallInt
  Twofactor            Twofactor[]
}

model Permissions_principal {
  permission_principal_id Int           @id @default(autoincrement()) @db.SmallInt
  name                    String        @db.VarChar(255)
  Permissions             Permissions[]
}
