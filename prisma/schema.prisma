generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DoblesFactores {
  doble_factor_id       Int                @id @default(autoincrement())
  otplib_secreta        String?
  esta_configurado      Boolean            @default(false)
  usuario_id            Int?
  codigo_recuperacion   String?
  metodo_validacion     MetodosValidacion?
  fecha_creacion_codigo DateTime?          @db.Timestamp(6)
  Usuarios              Usuarios?          @relation(fields: [usuario_id], references: [usuario_id], map: "fk_dob_fac_usuario_id")
}

model Entidades {
  entidad_id      Int               @id @default(autoincrement())
  nombre          String            @db.VarChar(255)
  resolver        String?           @db.VarChar(255)
  es_entidad      Boolean?          @default(true)
  Permisos        Permisos[]
  Funcionalidades Funcionalidades[]
}

model Menus {
  menu_id              Int                 @id @default(autoincrement())
  title                String
  path                 String
  isEntity             Boolean
  parentMenuId         Int?
  entidad_id           Int?
  order                Int?
  level                Int?
  icon                 String?             @db.VarChar(255)
  activo               Boolean?            @default(true)
  Menus                Menus?              @relation("MenusToMenus_parentMenuId", fields: [parentMenuId], references: [menu_id], onDelete: Restrict, map: "fk_menus_parent_menu_id")
  other_Menus          Menus[]             @relation("MenusToMenus_parentMenuId")
  MenusPalabrasSec     MenusPalabras[]
  MenusTraduccionesSec MenusTraducciones[]
}

model Microservicios {
  microservicio_id        Int                    @id @default(autoincrement())
  name                    String                 @db.VarChar(255)
  url                     String                 @db.VarChar(255)
  activo                  Boolean
  ProveedoresServiciosSec ProveedoresServicios[]
  Validaciones            Validaciones[]
}

model Permisos {
  permiso_id              Int                       @id @default(autoincrement())
  entidad_id              Int?
  permiso                 String?
  es_publico              Boolean?
  Entidades               Entidades?                @relation(fields: [entidad_id], references: [entidad_id], onDelete: Restrict, map: "fk_permisos_entidad_id")
  PermisosValidacionesSec PermisosValidaciones[]
  FuncionalidadesPermisos FuncionalidadesPermisos[]
}

model Roles {
  rol_id                  Int                    @id @default(autoincrement())
  rol                     String                 @db.VarChar(100)
  Usuarios                Usuarios[]
  RolesFuncionalidadesSec RolesFuncionalidades[]
}

model Usuarios {
  usuario_id         Int              @id @default(autoincrement())
  nombre             String           @db.VarChar(255)
  email              String           @db.VarChar(255)
  activo             Boolean?         @default(true)
  username           String?
  password           String?
  token              String?
  salt               String?
  rol_id             Int?
  tiene_doble_factor Boolean?         @default(false)
  Roles              Roles?           @relation(fields: [rol_id], references: [rol_id], map: "fk_usuarios_rol_id")
  DoblesFactores     DoblesFactores[]
}

model MenusPalabras {
  menu_palabra_id Int    @id @default(autoincrement())
  menu_id         Int
  palabra         String @db.VarChar(255)
  Menus           Menus  @relation(fields: [menu_id], references: [menu_id], map: "fk_men_pal_menu_id")
}

model PermisosValidaciones {
  permiso_validacion_id Int          @id @default(autoincrement())
  permiso_id            Int
  validacion_id         Int
  Permisos              Permisos     @relation(fields: [permiso_id], references: [permiso_id], map: "fk_per_val_permiso_id")
  ValidacionesSec       Validaciones @relation(fields: [validacion_id], references: [validacion_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_per_val_validacion_id")
}

model Validaciones {
  validacion_id        Int                    @id @default(autoincrement())
  microservicio_id     Int?
  id_referenciado      String?                @db.VarChar(255)
  Microservicios       Microservicios?        @relation(fields: [microservicio_id], references: [microservicio_id], onDelete: Restrict, map: "fk_validaciones_microservicio_id")
  PermisosValidaciones PermisosValidaciones[]
}

model MenusTraducciones {
  menu_traduccion_id Int          @id @default(autoincrement())
  traduccion         String       @db.VarChar(255)
  traduccion_id      Int
  menu_id            Int
  Menus              Menus        @relation(fields: [menu_id], references: [menu_id], map: "fk_men_tra_menu_id")
  Traducciones       Traducciones @relation(fields: [traduccion_id], references: [traduccion_id], map: "fk_men_tra_traduccion_id")
}

model Traducciones {
  traduccion_id     Int                 @id @default(autoincrement())
  idioma            String              @db.VarChar(255)
  sigla             String              @db.VarChar(10)
  MenusTraducciones MenusTraducciones[]
}

model Iconos {
  icono_id Int     @id @default(autoincrement())
  nombre   String  @db.VarChar(255)
  activo   Boolean @default(true)
  unicode  String  @db.VarChar(255)
}

model ProveedoresServicios {
  proveedor_servicio_id       Int            @id @default(autoincrement())
  microservicio_id            Int
  lista_proveedores           String
  lista_entidades_secundarias String?
  Microservicios              Microservicios @relation(fields: [microservicio_id], references: [microservicio_id], map: "fk_pro_ser_microservicio_id")
}

model Funcionalidades {
  funcionalidad_id           Int                       @id @default(autoincrement())
  nombre                     String
  entidad_id                 Int
  Entidades                  Entidades                 @relation(fields: [entidad_id], references: [entidad_id], map: "fk_funcionalidades_entidad_id")
  FuncionalidadesPermisosSec FuncionalidadesPermisos[]
  RolesFuncionalidades       RolesFuncionalidades[]
}

model FuncionalidadesPermisos {
  funcionalidad_permiso_id Int             @id @default(autoincrement())
  funcionalidad_id         Int
  permiso_id               Int
  Funcionalidades          Funcionalidades @relation(fields: [funcionalidad_id], references: [funcionalidad_id], map: "fk_fun_per_funcionalidad_id")
  Permisos                 Permisos        @relation(fields: [permiso_id], references: [permiso_id], map: "fk_fun_per_permiso_id")
}

model RolesFuncionalidades {
  rol_funcionalidad_id Int             @id @default(autoincrement())
  funcionalidad_id     Int
  rol_id               Int
  Funcionalidades      Funcionalidades @relation(fields: [funcionalidad_id], references: [funcionalidad_id], map: "fk_rol_fun_funcionalidad_id")
  Roles                Roles           @relation(fields: [rol_id], references: [rol_id], map: "fk_rol_fun_rol_id")
}

enum MetodosValidacion {
  EMAIL
  TOTP
}
